#ООП

"""class Person: # создан класс человек который имеет два метода (поведения): один say и второй say_hello
# метод say_hello содержит один параметр messame, и данный метод вызывает метод say в классе Person, а метод say выводит
# на консоль сообщение, которе передаётся в параметре (messame)
    def say(self, message):
        print(message)
    def say_hello(self, messame):
        self.say(messame)

user = Person()
user.say_hello('Говорит человек 1')

user1 = Person()
user1.say_hello('Говорит человек 2')"""

# КОНСТРУКТОРЫ: ДЛЯ СОЗДАНИЕ ОБЪЕКТА КЛАССА ИСПОЛЬЗУЕТСЯ КОНСТРУКТОР. ОДНАКО МЫ МОЖЕМ ЯВНЫМ ОБРАЗОМ ОПРЕДЕЛИТЬ В КЛАССАХ КОНСТРУКТОР
# С ПОМОЩЬЮ МЕТОДА __init__()

"""class Person: #создали класс с именем человек
    def __init__(self): # определяем конструктор
        print('Создание обьекта Person') # выводит на консоль данный текст при создании оюъекта данного класса
    def say_hello(self): # создание метода say_hello, который выводит на консоль слово Hello
        print('Hello')

user = Person() #создаём объект на основе класса Person и при создании этого объекта автоматически вызывается конструктор"""

# АТРИБУТЫ ОБЪЕКТА: ОНИ ХРАНЯТ СОСТОЯНИЕ ОБЪЕКТА. ДЛЯ ОПРЕДЕЛЕНИЯ И УСТАНОВКИ АТРИБУТА ВНУТРИ КЛАССА МОЖНО ИСПОЛЬЗОВАТЬ КЛЮЧЕВОЕ СЛОВО SELF

"""class Person:
    def __init__(self, name, age, height):
        self.name = name
        self.age = age
        self.height = height

vasia = Person('Вася', 40, 170 )
petia = Person('Петя', 22, 190)

print(vasia.name)
print(petia.name)
print(vasia.age)
vasia.age = 50
print(vasia.age)
print(vasia.height)
petia.height = 200
print(petia.height)"""

# НАСЛЕДОВАНИЕ: ПОЗВОЛЯЕТ СОЗДАВАТЬ НОВЫЙ КЛАСС НА ОСНОВАНИИ УЖЕ СОЗДАННОГО (СУЩЕСТВУЮЩЕГО) КЛАССА.
# ОНО ЯВЛЯЕТСЯ ОДНОЙ ИЗ ГЛАВНОЙ ОСОБЕННОСТЬЮ ООП. ЭТО ОДИН ИЗ КИТОВ.
# КЛЮЧЕВЫЕ ПОНЯТИЯ НАСЛЕДОВАНИЯ ЭТО СУПЕРКЛАСС И ПОДКЛАСС. ПОДКЛАСС НАСЛЕДУЕТ ОТ СУПЕРКЛАССА ВСЕ ПУБЛИЧНЫЕ (ДОСТУПНЫЕ) АТРИБУТЫ И МЕТОДЫ.
# СУПЕР КЛАСС ЕЩЁ НАЗВАЮТ БАЗОВЫМ КЛАССОМ, А ПОДКЛАСС НАЗВАЮТ ДОЧЕРНИМ.
c
class User: #создаём базовый класс User, который имеет конструктор с одним парметром name
    def __init__(self, name): #конструктор класса User
        self.name = name #присваиваем текущему классу атрибут name, который передаётся из параметра конструктора

class Work(User): # cоздаём дочерний класс.

    def worker(self, company): # определяем метод worker, который имеет один парамет company
        print(self.name + ' работает '+company) #выводим атрибут name ииз базового класса и добавляем строку "работает"
        #а также переменну, которая переда1тся из параметра данного метода


user1 = Work('User1') # cоздаём объект на основке класса Work
print(user1.name) # выводим атрибут name из базового класса user
user1.worker('Компания 1') # вызываем метод из класса Work и передаём название компании в которой работает человек



print('users')

print('hello')























